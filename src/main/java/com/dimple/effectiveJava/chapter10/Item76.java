package com.dimple.effectiveJava.chapter10;

/**
 * @className: Item76
 * @description: 努力使失败保持原子性
 * 当对象抛出异常之后，通常我们期望这个对象仍然保持在一种定义良好的可用状态之中，即使失败是发生在执行某个操作的过程中间。一般而言，失败的方法调用应该使对象保持在被调用之前的状态
 * ，具有这种属性的方法称为具有失败原子性。
 *
 * 1.设计一个不可变对象，如果对象是不可变的，失败原子性就是显然的。如果一个操作失败了，它可能阻止创建新的对象，但是永远不会使已有的对象保持在不一致的状态之中，因为当每个对象被创建滞后于就一直处于一致的状态之中。
 * 2. 对于在可变对象上执行操作的方法，获得失败原子性最常见的方法就是在执行操作之前检查参数的有效性。这可以使得对象状态在被修改之前，抛出合适的异常。
 * 3. 调整计算的处理过程的顺序，使得任何可能失败的计算部分都在对象状态被修改之前发生。
 * 4. 在对象的一份临时拷贝上操作，当操作完成后再用临时拷贝中的结果替代对象中的内容。
 * 5. 写一段恢复代码，由他来拦截操作过程中发生的失败，以及使对象回滚到操作开始之前的状态。
 * @auther: Dimple
 * @date: 06/17/19
 * @version: 1.0
 */
public class Item76 {
}
